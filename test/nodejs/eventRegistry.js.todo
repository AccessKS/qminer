/**
 * Copyright (c) 2015, Quintelligence d.o.o.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * The views and conclusions contained in the software and documentation are those
 * of the authors and should not be interpreted as representing official policies,
 * either expressed or implied, of the FreeBSD Project.
 */
 
// TODO: use a mock ER service, so that the success of the unit test doesn't depend on the up status of eventregistry

console.log(__filename)
var er = require('../../src/nodejs/scripts/eventRegistry'); 

// suggest events with prefix 'ebola'
var suggestions;
er.suggest('ebola', function(S) { 
	suggestions = S;
	console.log("\nWIKIPEDIA SUGGESTIONS (ebola):");
	for (var i=0; i < suggestions.length; i++) { console.log(suggestions[i].label+', '+suggestions[i].id); }
});

// get event by label
var event_label = 'Ebola virus disease';
var events;
er.getEventsByName(event_label, 10, function(E) { 
	events = E.events.results;
	console.log('\nEVENTS (Ebola virus disease):');
	for (var i=0; i < events.length; i++) { console.log(events[i].uri+', '+events[i].eventDate); }
});

// get articles from the first event
var eventId = 2205305; // RECAP: Doctors investigating first ebola case in Scotland after aid worker returns from West Africa
var articles;
er.getArticles(eventId, 10, function(A) { 
	articles = A[eventId].articles.results;
	console.log('\nARTICLES (RECAP: Doctors investigating first ebola case in Scotland after aid worker returns from West Africa):');
	for (var i=0; i < articles.length; i++) { console.log(articles[i].title+', '+articles[i].date+', '+articles[i].time); }
});

// get recent articles and activity Ids
var recentArticles;
var recentEventIds;
er.getRecentActivity(10, 10, 0.5, function(J) {
	recent = J;
	recentArticles = J.recentActivity.articles.activity;
	recentEventIds = J.recentActivity.events.activity
	console.log('\nRECENT ARTICLES:');
	for (var i=0; i < recentArticles.length; i++) { console.log(recentArticles[i].title+', '+recentArticles[i].date+', '+recentArticles[i].time); }
});

// search events
var search;
er.searchEvents('ljubljana',10, function(S) {
	console.log('\nSEARCH RESULTS:');
	search = S.events.results;
	for (var i=0; i < search.length; i++) { console.log(search[i].uri+', '+search[i].eventDate); }
});